// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: dk.proto

package data_keeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MP4Service_ReplicateFile_FullMethodName = "/dfs.MP4Service/ReplicateFile"
)

// MP4ServiceClient is the client API for MP4Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MP4ServiceClient interface {
	ReplicateFile(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error)
}

type mP4ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMP4ServiceClient(cc grpc.ClientConnInterface) MP4ServiceClient {
	return &mP4ServiceClient{cc}
}

func (c *mP4ServiceClient) ReplicateFile(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error) {
	out := new(ReplicateResponse)
	err := c.cc.Invoke(ctx, MP4Service_ReplicateFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MP4ServiceServer is the server API for MP4Service service.
// All implementations must embed UnimplementedMP4ServiceServer
// for forward compatibility
type MP4ServiceServer interface {
	ReplicateFile(context.Context, *ReplicateRequest) (*ReplicateResponse, error)
	mustEmbedUnimplementedMP4ServiceServer()
}

// UnimplementedMP4ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMP4ServiceServer struct {
}

func (UnimplementedMP4ServiceServer) ReplicateFile(context.Context, *ReplicateRequest) (*ReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateFile not implemented")
}
func (UnimplementedMP4ServiceServer) mustEmbedUnimplementedMP4ServiceServer() {}

// UnsafeMP4ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MP4ServiceServer will
// result in compilation errors.
type UnsafeMP4ServiceServer interface {
	mustEmbedUnimplementedMP4ServiceServer()
}

func RegisterMP4ServiceServer(s grpc.ServiceRegistrar, srv MP4ServiceServer) {
	s.RegisterService(&MP4Service_ServiceDesc, srv)
}

func _MP4Service_ReplicateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MP4ServiceServer).ReplicateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MP4Service_ReplicateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MP4ServiceServer).ReplicateFile(ctx, req.(*ReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MP4Service_ServiceDesc is the grpc.ServiceDesc for MP4Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MP4Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.MP4Service",
	HandlerType: (*MP4ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateFile",
			Handler:    _MP4Service_ReplicateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dk.proto",
}
