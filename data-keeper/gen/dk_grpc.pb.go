// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: dk.proto

package mp4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MP4Service_UploadFile_FullMethodName   = "/mp4.MP4Service/UploadFile"
	MP4Service_DownloadFile_FullMethodName = "/mp4.MP4Service/DownloadFile"
)

// MP4ServiceClient is the client API for MP4Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MP4ServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (MP4Service_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (MP4Service_DownloadFileClient, error)
}

type mP4ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMP4ServiceClient(cc grpc.ClientConnInterface) MP4ServiceClient {
	return &mP4ServiceClient{cc}
}

func (c *mP4ServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (MP4Service_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MP4Service_ServiceDesc.Streams[0], MP4Service_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mP4ServiceUploadFileClient{stream}
	return x, nil
}

type MP4Service_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*FileResponse, error)
	grpc.ClientStream
}

type mP4ServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *mP4ServiceUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mP4ServiceUploadFileClient) CloseAndRecv() (*FileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mP4ServiceClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (MP4Service_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MP4Service_ServiceDesc.Streams[1], MP4Service_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mP4ServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MP4Service_DownloadFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type mP4ServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *mP4ServiceDownloadFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MP4ServiceServer is the server API for MP4Service service.
// All implementations must embed UnimplementedMP4ServiceServer
// for forward compatibility
type MP4ServiceServer interface {
	UploadFile(MP4Service_UploadFileServer) error
	DownloadFile(*FileRequest, MP4Service_DownloadFileServer) error
	mustEmbedUnimplementedMP4ServiceServer()
}

// UnimplementedMP4ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMP4ServiceServer struct {
}

func (UnimplementedMP4ServiceServer) UploadFile(MP4Service_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMP4ServiceServer) DownloadFile(*FileRequest, MP4Service_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedMP4ServiceServer) mustEmbedUnimplementedMP4ServiceServer() {}

// UnsafeMP4ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MP4ServiceServer will
// result in compilation errors.
type UnsafeMP4ServiceServer interface {
	mustEmbedUnimplementedMP4ServiceServer()
}

func RegisterMP4ServiceServer(s grpc.ServiceRegistrar, srv MP4ServiceServer) {
	s.RegisterService(&MP4Service_ServiceDesc, srv)
}

func _MP4Service_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MP4ServiceServer).UploadFile(&mP4ServiceUploadFileServer{stream})
}

type MP4Service_UploadFileServer interface {
	SendAndClose(*FileResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type mP4ServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *mP4ServiceUploadFileServer) SendAndClose(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mP4ServiceUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MP4Service_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MP4ServiceServer).DownloadFile(m, &mP4ServiceDownloadFileServer{stream})
}

type MP4Service_DownloadFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type mP4ServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *mP4ServiceDownloadFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// MP4Service_ServiceDesc is the grpc.ServiceDesc for MP4Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MP4Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mp4.MP4Service",
	HandlerType: (*MP4ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _MP4Service_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _MP4Service_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dk.proto",
}
